import logging
import smtplib
from email.header import Header
from email.mime.text import MIMEText

from app.celery_tasks.celery_worker import celery_app
from app.core.config import load_config

logger = logging.getLogger(__name__)

config = load_config()

EMAIL = config.mailing.email
EMAIL_PASSWORD = config.mailing.email_password


@celery_app.task(
    bind=True,
    max_retries=5,
    autoretry_for=(smtplib.SMTPException,),
    retry_backoff=True,
    retry_jitter=True)
def send_email(self, to_email: str, subject: str, body: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ SMTP —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞—Ç–æ–º, —Ç–µ–º–æ–π –∏ —Ç–µ–ª–æ–º –ø–∏—Å—å–º–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Args:
        to_email (str): Email-–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
        subject (str): –¢–µ–º–∞ –ø–∏—Å—å–º–∞.
        body (str): –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (plain text).

    Raises:
        smtplib.SMTPException: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ SMTP-—Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞.
        Exception: –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫—à–∞—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

    –ü—Ä–∏–º–µ—Ä:
        send_email.delay("user@example.com", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    """
    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = Header(subject, "utf-8")
    msg["From"] = EMAIL
    msg["To"] = to_email

    try:
        with smtplib.SMTP_SSL("smtp.yandex.ru", 465, timeout=10) as server:
            server.login(EMAIL, EMAIL_PASSWORD)
            server.sendmail(EMAIL, to_email, msg.as_string())
        logger.info(f"‚úÖ Email sent to {to_email}")

    except smtplib.SMTPRecipientsRefused as e:
        logger.error(f"‚ùå Invalid recipient: {e}")
    except smtplib.SMTPAuthenticationError as e:
        logger.critical(f"‚ùå SMTP auth error: {e}")
        raise
    except (smtplib.SMTPConnectError, smtplib.SMTPServerDisconnected, smtplib.SMTPDataError, ConnectionError) as e:
        logger.warning(f"üîÅ Retryable SMTP error: {e}")
        raise self.retry(exc=e)
    except Exception as e:
        logger.exception(f"‚ùå Unexpected error, retrying: {e}")
        raise self.retry(exc=e)
